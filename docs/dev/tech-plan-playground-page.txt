o  is mv getting too snarled?
    *  stream of conc
    o  re-consult templates capabilities for inspiration
    o  decide on the bigger change decisions
    o  decide on sequence and keep-alive feasibility
    o  off we go doing it
o  the "type something" makes a great eating it use case
o  should panic err handling be preserved - partic wrt platform diversity
o  resource/examplefilegetter() misleading name
o  move on to next iteration plan


-----------------------------------------------------------------------------
Scratch
-------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
mv too snarled?
-----------------------------------------------------------------------------
    o  what code is coupled?
    o  what code is lacking coherence?
    o  what just feels too long?
    o  what just feels fragile?
    o  what are the responsibilities here?

-----------------------------------------------------------------------------
what is involved?
-----------------------------------------------------------------------------
From tree nav down recursively

o  compiledtemplates.go         looks v simple, but hides monolith?

o  examplefilegetter.go         change to being something that publishes a 
                                set of symbolic names for the canned examples
                                and serves them.

o  websitehandlers.go           A little bit long?.
                                Seven imports
                                Split into one handler module per page.
                                Why is playground handler mussy cf quickstart?
                                o  Has for parse form.
                                o  Boiler plate top level mdl instan.
                                o  Refresh or canned example specialism when
                                   it comes to building model.
                                o  Rendering orchestration is in common.
                                o  And there will be more.
                                
o  viewmodels/playground.go     o  too long
                                o  has lots of constants
                                o  setconstantfields() is ludicruous
                                o  there is needless duplication of interest
                                   in constants like InputTextElementName. How
                                   can we reduce these to single constants that
                                   are available to both the template and the
                                   view model behaviour code?
                                o  the model conflates several concepts:
                                    o  constants
                                    o  rendering state (like active)
                                    o  rendering state (like URLs and actions)

                                o  should model be split into smaller pieces
                                   and composed? (incl .elementNames and 
                                   .urls for example)?
                                o  and controls sub model
                                o  input pane sub model
                                o  output pane sub model
                                o  should model types and model factories be
                                   separated?

                                o  which things should be "active" or "hidden"
                                   etc. should be a map, despite added
                                   complexity in template.

                                o  volte face on earlier decision to keep
                                   template as simple as possible?
                                   Need to re-read and assimilate possibilities
                                   to work out how far to take this and the
                                   trade offs.

                                o  data required by the template should be
                                   isolated
                                o  and behaviour of what state should be should
                                   be elsewhere
                                o  constants consumed by rendering should be on
                                   their own.
                                o  Constants consumed by model state
                                   intelligence maybe coupled only to model and
                                   hidden from rendering.

                                o  does mvvc help? or a new pattern?

o  toplevel.go                  o  middle pages are mutex, so why not have
                                   interface type and instantiate only the
                                   right one! (doh!)
