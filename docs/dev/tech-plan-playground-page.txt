    o  tidy up web gui to show paul and carl etc
        *  Unit tests for model view interaction?
        *  Manual exercise of playground gui and going back and forth to quickstart
        *  Space separated summary example button press
            *  First rename URLPlaygroundExample to be URLPlaygroundExampleSpaceDelim, and
               improve comments around all usages.
               *  Code
               *  Regression and manual test.
            *  Give resources an example getter with enums
            *  Replace direct use of static/examples/space_delim.txt with call to getter
            *  Note template in common header to playgroun space delim
            *  Implies needs dupe field in playgroun model - so set it up in consts part
            *  Modify template for playground to give btn this url
            *  Make it work interactively
            *  Augment existing playground entry unit test
        *  Now also do the inline space sep menu item
        *  unfinished links do something more sensible
            *  add a ref to a new not done template in top level template booled
            *  add and init the bool to the model constructors
            *  make a catchall handler that sets up model to the not done content
            *  see if works inter
                *  explicit not exist url
                *  just # = no
            *  how unit test?
            *  style the template
            *  regression tests
        *  resurrect gae version (no - needs memcache or db)
        *  fix problems caused by updating assetfs
        o  have another go at gae in knowledge of init() behaviour
            o  design
                *  re-read go definition of init behaviour
                *  re-read go gae tutorial - wrt initialisation
                    *  entry point package is not that - simply some package that
                       registers handlers with http.HandleFunc() - so GAE must instantiate and spin
                       up a server itself.
                *  so what must have init behaviour?
                    *  only the psuedo entry point to call set up routing
                *  how does gae resolve third party package dependencies like assetfs?
                    *  it uploads the packages from your gopath tree
                *  make psuedo entry point file to set up routing in init fn
                *  reduce app.yaml to omit static stuff
            *  try locally
                *  first ensure builds with gae
                *  first ensure gae tests run and pass
                *  then gae serve
            *  now deploy?
            *  can we see logs on gae?
            o  when work check in
                o  work up commit note


        o  reflect on messyness of model view variants coupling
            o  cookies vs form variables?
        o  check issues on github for what else to do before showing
        o  add security?
        o  more of a pitch
        o  biz proposition link
        o  what conversion rules
        o  ditch community and get source?
        o  platform support
        o  read ALL files in directory
        o  external links (e.g. github), maby docs dir?
        o  which links to furnish content for, or temp content
        o  is panic right for gae?
        o  decide how to host = both azure and aws for cf
        o  close source?


-----------------------------------------------------------------------------
Scratch
-------------------------------------------------------------------------
-----------------------------------------------------------------------------
Go initialisation behaviour
    o  package vars are initted in smart (dependency) order
    o  but not across packages
    o  plus also init() is called - optionally several per package / even per file
    o  if a package has imports, then the imported package gets initialised before
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
Futures
-----------------------------------------------------------------------------
