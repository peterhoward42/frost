*  Anticipate urls for landing page and for playground landing
*  code the current html thus
*  Update handlers so both produce same page but indi
*  Make default handler also go to quickstart/python
*  Refactor template parsing to in common
*  Make active nav show if in quickstart or playground
*  Design how to split off and delegate rendering of these two pages
*  Get playground to look the part with static content
    *  The header blocks
    *  Some icons
    *  Text Editor in left half
*  Sync


*  Make rendering from model populate both text areas from model using fixed
   models
*  Have refresh post content of lhs
*  Make only chosen urls work others barf
*  Have refresh handler copy input back to input and something based thereon
*  Refactor main / handlers in common?
*  Have refresh handler launch chain to build new display model that echos
   input text and includes some trivial output text
*  Should now have enter-refresh-render cycle

*  Cause the example button selections to stimulate a refresh, parameterised
   with the type of example required.
   *  Link works and handler puts in foo bar with spaces and does refresh
   *  How make default btn send href uri?
   *  How organise differentiation of example type required?
    *  Make space sep handler get content from resource
    *  Add another to refactor commonality in handler

*  Stuff to Paul

o  Next iter - start to design tdd of conversion
    *  Put in more realistic input file
    *  Satisfy up conversion interface
    *  Refactor processors to filereaders
    *  Put the first bit of processing into the whitespace converter
    *  Work the precedence bottom up

    o  tidy up web gui to show paul and carl etc
        *  not happy with playground button layout
        *  make textareas have h scrollbars
        o  layout of panels and wrapping
            o  add option to flip to tabbed view
                *  Restart...
                    *  Design cleaner paradigm
                    o  Upgrade templating both visual and hidden to anticipate
                       needs of model.
                    o  Upgrade the model fields to match demands.
                    o  Work out how to construct models in handlers from data
                       available in input fields

            o  make sure no unused handlers left behind
            o  does this mean the other playground choices should follow?

        o  unfinished links do something more sensible
        o  edit/refresh cycle should work
        o  try something should work


-----------------------------------------------------------------------------
Scratch
-------------------------------------------------------------------------

We need only a single refresh handler

The view model contains mandate: 
    {sides, tabbed_input_in_front, tabbed_output_in_front}
The rendering adapts thus:
    o  Switch to view label
    o  Switch view submit btn value (opposite of that being shown)
    o  Switch tab submit btn values
    o  Choice of content layout template
    o  Choice of front tab

The handler respects the input form when available for:
    o  Input content of course
    o  Mandate to switch view types
    o  Mandate to switch currently selected tab
    o  Continuity of view style from hidden field

-----------------------------------------------------------------------------
Futures
-----------------------------------------------------------------------------

