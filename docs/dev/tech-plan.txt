*  Anticipate urls for landing page and for playground landing
*  code the current html thus
*  Update handlers so both produce same page but indi
*  Make default handler also go to quickstart/python
*  Refactor template parsing to in common
*  Make active nav show if in quickstart or playground
o  Decide how to split off and delegate rendering of these two pages
    *  Design model for quickstart and model for playground, and give
       main model ptr to each
    *  Use non null of these to flag which to show as active in main page
    o  so now how to separate out code and template for each sub view
        *  We have dedicated models
        o  So how organise the template rendering delegation and separation?
            o  Have templates execute other ones conditionally with sub models
            o  Experiment putting quick start into separate template and calling that
                o  Write template file
                o  How give it an addressable name during parsing?


o  Get the tab-like navigation mechanism working
o  Use the playground page as a driving use case...
o  Focus first on space-delimitted format
o  Make example button show  a small fragment of example space-delim content
   on the left hand side, launches the converter, and shows the JSON on
   the right. Start with a converter that creates just {} for result.
o  Gradually evolve the space delim conversion to do the real job - using
   unit-test-driven steps (uTDD). The GUI will keep up without any separate
   work because it will already be plumbed-in.

-----------------------------------------------------------------------------
scratch
-----------------------------------------------------------------------------
{{template "name" pipeline}}





