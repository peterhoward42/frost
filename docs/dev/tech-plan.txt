*  Anticipate urls for landing page and for playground landing
*  code the current html thus
*  Update handlers so both produce same page but indi
*  Make default handler also go to quickstart/python
*  Refactor template parsing to in common
*  Make active nav show if in quickstart or playground
*  Design how to split off and delegate rendering of these two pages
*  Get playground to look the part with static content
    *  The header blocks
    *  Some icons
    *  Text Editor in left half
*  Sync


*  Make rendering from model populate both text areas from model using fixed
   models
*  Have refresh post content of lhs
*  Make only chosen urls work others barf
*  Have refresh handler copy input back to input and something based thereon
*  Refactor main / handlers in common?
*  Have refresh handler launch chain to build new display model that echos
   input text and includes some trivial output text
*  Should now have enter-refresh-render cycle

*  Cause the example button selections to stimulate a refresh, parameterised
   with the type of example required.
   *  Link works and handler puts in foo bar with spaces and does refresh
   *  How make default btn send href uri?
   *  How organise differentiation of example type required?
    *  Make space sep handler get content from resource
    *  Add another to refactor commonality in handler

*  Stuff to Paul

o  Next iter - start to design tdd of conversion
    *  Put in more realistic input file
    *  Satisfy up conversion interface
    *  Refactor processors to filereaders
    o  Put the first bit of processing into the whitespace converter
        *  Split into lines sequence attached line numbers
        *  Trim
        *  Separate into comment or non comment parsing
        *  Have I got go docs offline?
        *  Parse out fields
        *  Write fields out in json as strings
        *  Fix so each field comes out as obj in braces?
        *  Type convert the fields in value alone
            *  provide request context down low
            *  type conversion is duff
                *  find better way
                    *  make whitespace parsing of fields clearer
                    *  restructure fields content to use fixed set of types
                       and to look nicer
                *  need unit tests for this stuff to be efficient
                    *  do unit test for type interence
                    *  double quotes
                    *  new value
        *  add in tags
        *  Add in comments objects
    o  Work the precedence bottom up
        *  Add in Row as higher precedence
        *  KeyValue
        o  Tables
            *  Consider search ahead and how organise outer nav so to do
            o  Design table state machine
            o  Have a play and explore to see how it works out
            o  Add in column headings recognition
            o  Add in table name recognition
    o  unit test for splitting at whitespace conv level?


-----------------------------------------------------------------------------
Scratch
-----------------------------------------------------------------------------
Table FSM

bool inTable init to false

if tableUnderConstruction 
    addedToExistingTable = consumeAsNextLineInTable {
    if addedToExistingTable
        return       
    } else {
        # We found a non-table line
        finalize tableUnderConstruction
        tableUnderConstruction = false
    }
}
# Drop thru





-----------------------------------------------------------------------------
Futures
-----------------------------------------------------------------------------

