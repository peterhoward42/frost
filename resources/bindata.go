// Code generated by go-bindata.
// sources:
// staticfiles/css/bootstrap.min-orig.css
// staticfiles/css/bootstrap.min.css
// staticfiles/css/bootstrap.min.cyborg.css
// staticfiles/css/bootstrap.min.flatly.css
// staticfiles/css/frost.css
// staticfiles/examples/csv.csv
// staticfiles/examples/space_delim.txt
// staticfiles/fonts/glyphicons-halflings-regular.eot
// staticfiles/fonts/glyphicons-halflings-regular.svg
// staticfiles/fonts/glyphicons-halflings-regular.ttf
// staticfiles/fonts/glyphicons-halflings-regular.woff
// staticfiles/fonts/glyphicons-halflings-regular.woff2
// staticfiles/js/bootstrap.min.js
// staticfiles/js/jquery.min.js
// staticfiles/templates/commonfooter.html
// staticfiles/templates/commonheader.html
// staticfiles/templates/maingui.html
// staticfiles/templates/playground.html
// staticfiles/templates/playgroundsidebyside.html
// staticfiles/templates/playgroundtabbed.html
// staticfiles/templates/quickstart.html
// DO NOT EDIT!

package main

import (
	"fmt"
	"io/ioutil"
	"strings"
	"os"
	"path/filepath"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// staticfilesCssBootstrapMinOrigCss reads file data from disk. It returns an error on failure.
func staticfilesCssBootstrapMinOrigCss() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\css\\bootstrap.min-orig.css"
	name := "staticfiles/css/bootstrap.min-orig.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesCssBootstrapMinCss reads file data from disk. It returns an error on failure.
func staticfilesCssBootstrapMinCss() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\css\\bootstrap.min.css"
	name := "staticfiles/css/bootstrap.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesCssBootstrapMinCyborgCss reads file data from disk. It returns an error on failure.
func staticfilesCssBootstrapMinCyborgCss() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\css\\bootstrap.min.cyborg.css"
	name := "staticfiles/css/bootstrap.min.cyborg.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesCssBootstrapMinFlatlyCss reads file data from disk. It returns an error on failure.
func staticfilesCssBootstrapMinFlatlyCss() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\css\\bootstrap.min.flatly.css"
	name := "staticfiles/css/bootstrap.min.flatly.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesCssFrostCss reads file data from disk. It returns an error on failure.
func staticfilesCssFrostCss() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\css\\frost.css"
	name := "staticfiles/css/frost.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesExamplesCsvCsv reads file data from disk. It returns an error on failure.
func staticfilesExamplesCsvCsv() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\examples\\csv.csv"
	name := "staticfiles/examples/csv.csv"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesExamplesSpace_delimTxt reads file data from disk. It returns an error on failure.
func staticfilesExamplesSpace_delimTxt() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\examples\\space_delim.txt"
	name := "staticfiles/examples/space_delim.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesFontsGlyphiconsHalflingsRegularEot reads file data from disk. It returns an error on failure.
func staticfilesFontsGlyphiconsHalflingsRegularEot() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\fonts\\glyphicons-halflings-regular.eot"
	name := "staticfiles/fonts/glyphicons-halflings-regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesFontsGlyphiconsHalflingsRegularSvg reads file data from disk. It returns an error on failure.
func staticfilesFontsGlyphiconsHalflingsRegularSvg() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\fonts\\glyphicons-halflings-regular.svg"
	name := "staticfiles/fonts/glyphicons-halflings-regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesFontsGlyphiconsHalflingsRegularTtf reads file data from disk. It returns an error on failure.
func staticfilesFontsGlyphiconsHalflingsRegularTtf() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\fonts\\glyphicons-halflings-regular.ttf"
	name := "staticfiles/fonts/glyphicons-halflings-regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesFontsGlyphiconsHalflingsRegularWoff reads file data from disk. It returns an error on failure.
func staticfilesFontsGlyphiconsHalflingsRegularWoff() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\fonts\\glyphicons-halflings-regular.woff"
	name := "staticfiles/fonts/glyphicons-halflings-regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesFontsGlyphiconsHalflingsRegularWoff2 reads file data from disk. It returns an error on failure.
func staticfilesFontsGlyphiconsHalflingsRegularWoff2() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\fonts\\glyphicons-halflings-regular.woff2"
	name := "staticfiles/fonts/glyphicons-halflings-regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesJsBootstrapMinJs reads file data from disk. It returns an error on failure.
func staticfilesJsBootstrapMinJs() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\js\\bootstrap.min.js"
	name := "staticfiles/js/bootstrap.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesJsJqueryMinJs reads file data from disk. It returns an error on failure.
func staticfilesJsJqueryMinJs() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\js\\jquery.min.js"
	name := "staticfiles/js/jquery.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesTemplatesCommonfooterHtml reads file data from disk. It returns an error on failure.
func staticfilesTemplatesCommonfooterHtml() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\templates\\commonfooter.html"
	name := "staticfiles/templates/commonfooter.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesTemplatesCommonheaderHtml reads file data from disk. It returns an error on failure.
func staticfilesTemplatesCommonheaderHtml() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\templates\\commonheader.html"
	name := "staticfiles/templates/commonheader.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesTemplatesMainguiHtml reads file data from disk. It returns an error on failure.
func staticfilesTemplatesMainguiHtml() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\templates\\maingui.html"
	name := "staticfiles/templates/maingui.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesTemplatesPlaygroundHtml reads file data from disk. It returns an error on failure.
func staticfilesTemplatesPlaygroundHtml() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\templates\\playground.html"
	name := "staticfiles/templates/playground.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesTemplatesPlaygroundsidebysideHtml reads file data from disk. It returns an error on failure.
func staticfilesTemplatesPlaygroundsidebysideHtml() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\templates\\playgroundsidebyside.html"
	name := "staticfiles/templates/playgroundsidebyside.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesTemplatesPlaygroundtabbedHtml reads file data from disk. It returns an error on failure.
func staticfilesTemplatesPlaygroundtabbedHtml() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\templates\\playgroundtabbed.html"
	name := "staticfiles/templates/playgroundtabbed.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// staticfilesTemplatesQuickstartHtml reads file data from disk. It returns an error on failure.
func staticfilesTemplatesQuickstartHtml() (*asset, error) {
	path := "C:\\go-ws\\src\\github.com\\peterhoward42\\frost\\resources\\staticfiles\\templates\\quickstart.html"
	name := "staticfiles/templates/quickstart.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"staticfiles/css/bootstrap.min-orig.css": staticfilesCssBootstrapMinOrigCss,
	"staticfiles/css/bootstrap.min.css": staticfilesCssBootstrapMinCss,
	"staticfiles/css/bootstrap.min.cyborg.css": staticfilesCssBootstrapMinCyborgCss,
	"staticfiles/css/bootstrap.min.flatly.css": staticfilesCssBootstrapMinFlatlyCss,
	"staticfiles/css/frost.css": staticfilesCssFrostCss,
	"staticfiles/examples/csv.csv": staticfilesExamplesCsvCsv,
	"staticfiles/examples/space_delim.txt": staticfilesExamplesSpace_delimTxt,
	"staticfiles/fonts/glyphicons-halflings-regular.eot": staticfilesFontsGlyphiconsHalflingsRegularEot,
	"staticfiles/fonts/glyphicons-halflings-regular.svg": staticfilesFontsGlyphiconsHalflingsRegularSvg,
	"staticfiles/fonts/glyphicons-halflings-regular.ttf": staticfilesFontsGlyphiconsHalflingsRegularTtf,
	"staticfiles/fonts/glyphicons-halflings-regular.woff": staticfilesFontsGlyphiconsHalflingsRegularWoff,
	"staticfiles/fonts/glyphicons-halflings-regular.woff2": staticfilesFontsGlyphiconsHalflingsRegularWoff2,
	"staticfiles/js/bootstrap.min.js": staticfilesJsBootstrapMinJs,
	"staticfiles/js/jquery.min.js": staticfilesJsJqueryMinJs,
	"staticfiles/templates/commonfooter.html": staticfilesTemplatesCommonfooterHtml,
	"staticfiles/templates/commonheader.html": staticfilesTemplatesCommonheaderHtml,
	"staticfiles/templates/maingui.html": staticfilesTemplatesMainguiHtml,
	"staticfiles/templates/playground.html": staticfilesTemplatesPlaygroundHtml,
	"staticfiles/templates/playgroundsidebyside.html": staticfilesTemplatesPlaygroundsidebysideHtml,
	"staticfiles/templates/playgroundtabbed.html": staticfilesTemplatesPlaygroundtabbedHtml,
	"staticfiles/templates/quickstart.html": staticfilesTemplatesQuickstartHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"staticfiles": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"bootstrap.min-orig.css": &bintree{staticfilesCssBootstrapMinOrigCss, map[string]*bintree{
			}},
			"bootstrap.min.css": &bintree{staticfilesCssBootstrapMinCss, map[string]*bintree{
			}},
			"bootstrap.min.cyborg.css": &bintree{staticfilesCssBootstrapMinCyborgCss, map[string]*bintree{
			}},
			"bootstrap.min.flatly.css": &bintree{staticfilesCssBootstrapMinFlatlyCss, map[string]*bintree{
			}},
			"frost.css": &bintree{staticfilesCssFrostCss, map[string]*bintree{
			}},
		}},
		"examples": &bintree{nil, map[string]*bintree{
			"csv.csv": &bintree{staticfilesExamplesCsvCsv, map[string]*bintree{
			}},
			"space_delim.txt": &bintree{staticfilesExamplesSpace_delimTxt, map[string]*bintree{
			}},
		}},
		"fonts": &bintree{nil, map[string]*bintree{
			"glyphicons-halflings-regular.eot": &bintree{staticfilesFontsGlyphiconsHalflingsRegularEot, map[string]*bintree{
			}},
			"glyphicons-halflings-regular.svg": &bintree{staticfilesFontsGlyphiconsHalflingsRegularSvg, map[string]*bintree{
			}},
			"glyphicons-halflings-regular.ttf": &bintree{staticfilesFontsGlyphiconsHalflingsRegularTtf, map[string]*bintree{
			}},
			"glyphicons-halflings-regular.woff": &bintree{staticfilesFontsGlyphiconsHalflingsRegularWoff, map[string]*bintree{
			}},
			"glyphicons-halflings-regular.woff2": &bintree{staticfilesFontsGlyphiconsHalflingsRegularWoff2, map[string]*bintree{
			}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"bootstrap.min.js": &bintree{staticfilesJsBootstrapMinJs, map[string]*bintree{
			}},
			"jquery.min.js": &bintree{staticfilesJsJqueryMinJs, map[string]*bintree{
			}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"commonfooter.html": &bintree{staticfilesTemplatesCommonfooterHtml, map[string]*bintree{
			}},
			"commonheader.html": &bintree{staticfilesTemplatesCommonheaderHtml, map[string]*bintree{
			}},
			"maingui.html": &bintree{staticfilesTemplatesMainguiHtml, map[string]*bintree{
			}},
			"playground.html": &bintree{staticfilesTemplatesPlaygroundHtml, map[string]*bintree{
			}},
			"playgroundsidebyside.html": &bintree{staticfilesTemplatesPlaygroundsidebysideHtml, map[string]*bintree{
			}},
			"playgroundtabbed.html": &bintree{staticfilesTemplatesPlaygroundtabbedHtml, map[string]*bintree{
			}},
			"quickstart.html": &bintree{staticfilesTemplatesQuickstartHtml, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

